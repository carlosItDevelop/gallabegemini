// <auto-generated />
using System;
using GeneralLabSolutions.InfraStructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeneralLabSolutions.InfraStructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250628134615_AddAuditAgainInfra")]
    partial class AddAuditAgainInfra
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.CRM.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataInclusao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaModificacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UsuarioInclusao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UsuarioUltimaModificacao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.ToTable("Activities", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.CRM.CrmTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Assignee")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DataInclusao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaModificacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("date");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UsuarioInclusao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UsuarioUltimaModificacao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.ToTable("CrmTasks", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.CRM.CrmTaskAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CrmTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataInclusao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaModificacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UploadedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UsuarioInclusao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UsuarioUltimaModificacao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CrmTaskId");

                    b.ToTable("CrmTaskAttachments", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.CRM.CrmTaskComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CrmTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataInclusao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaModificacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UsuarioInclusao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UsuarioUltimaModificacao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CrmTaskId");

                    b.ToTable("CrmTaskComments", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.CRM.Lead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Company")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("DataInclusao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaModificacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastContact")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Position")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Responsible")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Temperature")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UsuarioInclusao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UsuarioUltimaModificacao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Leads", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.CRM.LeadNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataInclusao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaModificacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UsuarioInclusao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UsuarioUltimaModificacao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.ToTable("LeadNotes", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.CRM.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.CalendarEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllDay")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CalendarEvents", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.CategoriaProduto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasComment("Família do produto");

                    b.HasKey("Id");

                    b.HasIndex("Descricao")
                        .IsUnique()
                        .HasDatabaseName("IX_Cliente_Descricao");

                    b.ToTable("CategoriaProduto");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContatoRepresentante")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DataInclusao")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("DataInclusao");

                    b.Property<DateTime?>("DataUltimaModificacao")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("DataUltimaModificacao");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(254)");

                    b.Property<string>("InscricaoEstadual")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Observacao")
                        .HasColumnType("varchar(4000)");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusDoCliente")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<string>("TelefonePrincipal")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("TipoDeCliente")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<string>("TipoDePessoa")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<string>("UsuarioInclusao")
                        .IsRequired()
                        .HasColumnType("varchar(120)");

                    b.Property<string>("UsuarioUltimaModificacao")
                        .IsRequired()
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("Documento")
                        .IsUnique()
                        .HasDatabaseName("IX_Cliente_Documento");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Cliente_Email");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_Cliente_Nome");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Conta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataPagamento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("EstaPaga")
                        .HasColumnType("bit");

                    b.Property<bool>("Inativa")
                        .HasColumnType("bit");

                    b.Property<string>("Instituicao")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Observacao")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TipoDeConta")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("DataVencimento")
                        .HasDatabaseName("IX_Conta_DataVencimento");

                    b.HasIndex("Documento")
                        .IsUnique()
                        .HasDatabaseName("IX_Conta_Documento");

                    b.ToTable("Contas", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Contato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(254)");

                    b.Property<string>("EmailAlternativo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar");

                    b.Property<string>("TelefoneAlternativo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar");

                    b.Property<string>("TipoDeContato")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Contato_Email");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_Contato_Nome");

                    b.HasIndex("PessoaId")
                        .HasDatabaseName("IX_Contato_PessoaId");

                    b.ToTable("Contato", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.DadosBancarios", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Agencia")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Banco")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Conta")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipoDeContaBancaria")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("Agencia")
                        .HasDatabaseName("IX_DadosBancarios_Agencia");

                    b.HasIndex("Banco")
                        .HasDatabaseName("IX_DadosBancarios_Banco");

                    b.HasIndex("Conta")
                        .HasDatabaseName("IX_DadosBancarios_Conta");

                    b.HasIndex("PessoaId")
                        .HasDatabaseName("IX_DadosBancarios_PessoaId");

                    b.HasIndex("TipoDeContaBancaria")
                        .HasDatabaseName("IX_DadosBancarios_TipoDeContaBancaria");

                    b.ToTable("DadosBancarios", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EstadoOuProvincia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("InformacoesAdicionais")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LinhaEndereco1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LinhaEndereco2")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PaisCodigoIso")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipoDeEndereco")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CodigoPostal")
                        .HasDatabaseName("IX_Endereco_CodigoPostal");

                    b.HasIndex("PaisCodigoIso")
                        .HasDatabaseName("IX_Endereco_PaisCodigoIso");

                    b.HasIndex("PessoaId")
                        .HasDatabaseName("IX_Endereco_PessoaId");

                    b.ToTable("Endereco", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.EstadoDoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("DadosExtras")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ItemPedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusDoItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ItemPedidoId");

                    b.HasIndex("StatusDoItemId");

                    b.ToTable("EstadoDoItem", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataInclusao")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("DataInclusao");

                    b.Property<DateTime?>("DataUltimaModificacao")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("DataUltimaModificacao");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(254)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusDoFornecedor")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<string>("TipoDePessoa")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<string>("UsuarioInclusao")
                        .IsRequired()
                        .HasColumnType("varchar(120)");

                    b.Property<string>("UsuarioUltimaModificacao")
                        .IsRequired()
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("Documento")
                        .IsUnique()
                        .HasDatabaseName("IX_Fornecedor_Documento");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Fornecedor_Email");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_Fornecedor_Nome");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("Fornecedor", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.HistoricoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DadosExtras")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ItemPedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusAnterior")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StatusNovo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TipoEvento")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ItemPedidoId");

                    b.ToTable("HistoricoItem", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.HistoricoPedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DadosExtras")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusAnterior")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StatusNovo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TipoEvento")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.ToTable("HistoricoPedido", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.ItemPedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomeDoProduto")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("varchar(600)")
                        .HasComment("Descrição do produto");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("NomeDoProduto")
                        .HasDatabaseName("IX_ItemPedido_NomeDoProduto");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ItemPedido", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.KanbanTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Column")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasAnnotation("Relational:JsonPropertyName", "column");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "dueDate");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasAnnotation("Relational:JsonPropertyName", "priority");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasAnnotation("Relational:JsonPropertyName", "title");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .HasDatabaseName("IX_KanbanTask_Description");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_KanbanTask_Title");

                    b.ToTable("KanbanTask", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.MensagemChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EhRespostaIA")
                        .HasColumnType("bit");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("MensagensChat", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Participante", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(254)")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Participante_Email");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Participante_Name");

                    b.ToTable("Participante", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Pedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataPedido")
                        .HasColumnType("datetime")
                        .HasColumnName("DataPedido");

                    b.Property<string>("StatusDoPedido")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(40)")
                        .HasDefaultValue("Orcamento");

                    b.Property<Guid>("VendedorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("VendedorId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Pedido", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Pessoa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Pessoa", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("DataDeValidade")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("varchar(600)")
                        .HasComment("Descrição do produto");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Imagem")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.Property<string>("Ncm")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("NCM");

                    b.Property<string>("StatusDoProduto")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(40)")
                        .HasDefaultValue("Dropshipping");

                    b.Property<decimal>("ValorUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ValorUnitario");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasDatabaseName("IX_Produto_Codigo");

                    b.HasIndex("Descricao")
                        .IsUnique()
                        .HasDatabaseName("IX_Produto_Descricao");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("Ncm")
                        .IsUnique()
                        .HasDatabaseName("IX_Produto_Ncm");

                    b.ToTable("Produto", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.StatusDoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("StatusDoItem", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.StatusDoItemIncompativel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusDoItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusDoItemIncompativelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StatusDoItemId");

                    b.HasIndex("StatusDoItemIncompativelId");

                    b.ToTable("StatusDoItemIncompativel", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Telefone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DDD")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipoDeTelefone")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("DDD")
                        .HasDatabaseName("IX_Telefone_DDD");

                    b.HasIndex("Numero")
                        .HasDatabaseName("IX_Telefone_Numero");

                    b.HasIndex("PessoaId")
                        .HasDatabaseName("IX_Telefone_PessoaId");

                    b.ToTable("Telefone", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Vendedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataInclusao")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("DataInclusao");

                    b.Property<DateTime?>("DataUltimaModificacao")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("DataUltimaModificacao");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(254)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusDoVendedor")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<string>("TipoDePessoa")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<string>("UsuarioInclusao")
                        .IsRequired()
                        .HasColumnType("varchar(120)");

                    b.Property<string>("UsuarioUltimaModificacao")
                        .IsRequired()
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("Documento")
                        .IsUnique()
                        .HasDatabaseName("IX_Vendedor_Documento");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Vendedor_Email");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_Vendedor_Nome");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("Vendedor", (string)null);
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUtilizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataValidade")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Percentual")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<string>("TipoDescontoVoucher")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<bool>("Utilizado")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ValorDesconto")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .HasDatabaseName("IX_Voucher_Codigo");

                    b.ToTable("Voucher", (string)null);
                });

            modelBuilder.Entity("KanbanTaskParticipante", b =>
                {
                    b.Property<Guid>("ParticipantesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TasksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ParticipantesId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("KanbanTaskParticipante");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.CRM.Activity", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.CRM.Lead", "Lead")
                        .WithMany("Activities")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.CRM.CrmTask", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.CRM.Lead", "Lead")
                        .WithMany("Tasks")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.CRM.CrmTaskAttachment", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.CRM.CrmTask", "CrmTask")
                        .WithMany("Attachments")
                        .HasForeignKey("CrmTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CrmTask");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.CRM.CrmTaskComment", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.CRM.CrmTask", "CrmTask")
                        .WithMany("Comments")
                        .HasForeignKey("CrmTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CrmTask");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.CRM.LeadNote", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.CRM.Lead", "Lead")
                        .WithMany("LeadNotes")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.CRM.Log", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.CRM.Lead", "Lead")
                        .WithMany("Logs")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Cliente", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.Pessoa", "Pessoa")
                        .WithOne()
                        .HasForeignKey("GeneralLabSolutions.Domain.Entities.Cliente", "PessoaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Contato", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.Pessoa", "Pessoa")
                        .WithMany("Contatos")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.DadosBancarios", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.Pessoa", "Pessoa")
                        .WithMany("DadosBancarios")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Endereco", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.Pessoa", "Pessoa")
                        .WithMany("Enderecos")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.EstadoDoItem", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.ItemPedido", "ItemPedido")
                        .WithMany("Estados")
                        .HasForeignKey("ItemPedidoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeneralLabSolutions.Domain.Entities.StatusDoItem", "StatusDoItem")
                        .WithMany()
                        .HasForeignKey("StatusDoItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ItemPedido");

                    b.Navigation("StatusDoItem");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Fornecedor", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.Pessoa", "Pessoa")
                        .WithOne()
                        .HasForeignKey("GeneralLabSolutions.Domain.Entities.Fornecedor", "PessoaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.HistoricoItem", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.ItemPedido", "ItemPedido")
                        .WithMany("Historico")
                        .HasForeignKey("ItemPedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemPedido");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.HistoricoPedido", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.Pedido", "Pedido")
                        .WithMany("Historico")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.ItemPedido", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.Pedido", "Pedido")
                        .WithMany("Itens")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GeneralLabSolutions.Domain.Entities.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Pedido", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeneralLabSolutions.Domain.Entities.Vendedor", "Vendedor")
                        .WithMany("Pedidos")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeneralLabSolutions.Domain.Entities.Voucher", "Voucher")
                        .WithMany("Pedidos")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Cliente");

                    b.Navigation("Vendedor");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Produto", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.CategoriaProduto", "CategoriaProduto")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeneralLabSolutions.Domain.Entities.Fornecedor", "Fornecedor")
                        .WithMany("Produtos")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CategoriaProduto");

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.StatusDoItemIncompativel", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.StatusDoItem", "StatusDoItem")
                        .WithMany("Incompatibilidades")
                        .HasForeignKey("StatusDoItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeneralLabSolutions.Domain.Entities.StatusDoItem", "StatusDoItemIncompativelNavigation")
                        .WithMany()
                        .HasForeignKey("StatusDoItemIncompativelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StatusDoItem");

                    b.Navigation("StatusDoItemIncompativelNavigation");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Telefone", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.Pessoa", "Pessoa")
                        .WithMany("Telefones")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Vendedor", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.Pessoa", "Pessoa")
                        .WithOne()
                        .HasForeignKey("GeneralLabSolutions.Domain.Entities.Vendedor", "PessoaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("KanbanTaskParticipante", b =>
                {
                    b.HasOne("GeneralLabSolutions.Domain.Entities.Participante", null)
                        .WithMany()
                        .HasForeignKey("ParticipantesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GeneralLabSolutions.Domain.Entities.KanbanTask", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.CRM.CrmTask", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.CRM.Lead", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("LeadNotes");

                    b.Navigation("Logs");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.CategoriaProduto", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Fornecedor", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.ItemPedido", b =>
                {
                    b.Navigation("Estados");

                    b.Navigation("Historico");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Pedido", b =>
                {
                    b.Navigation("Historico");

                    b.Navigation("Itens");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Pessoa", b =>
                {
                    b.Navigation("Contatos");

                    b.Navigation("DadosBancarios");

                    b.Navigation("Enderecos");

                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.StatusDoItem", b =>
                {
                    b.Navigation("Incompatibilidades");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Vendedor", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("GeneralLabSolutions.Domain.Entities.Voucher", b =>
                {
                    b.Navigation("Pedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
